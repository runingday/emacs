(setq inhibit-startup-message t)
(tool-bar-mode -1)
(fset 'yes-or-no-p 'y-or-n-p)
(global-set-key (kbd "<f5>") 'revert-buffer)

(use-package try
  :ensure t)

(use-package which-key
  :ensure t
  :config (which-key-mode))

;; Org-mode stuff
(use-package org-bullets
  :ensure t
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

(setq indo-enable-flex-matching t)
(setq ido-everywhere t)
(ido-mode 1)

(defalias 'list-buffers 'ibuffer)
;; (defalias 'list-buffers 'ibuffer-other-window)

;; If you like a tabbar

;(use-package tabbar
;  :ensure t
;  :config
;  (tabbar-mode 1))


(use-package ace-window
  :ensure t
  :init
  (progn
    (setq aw-dispatch-always t)
    (global-set-key (kbd "M-p") 'ace-window)
    ;(custom-set-char-faces
     ;'(aw-leading-char-face
     ; ((t (:inherit ace-jump-face-foreground :height 3.0)))))
    ))
    

;; winner mode 
(require 'winner)

(defun winner-mode-settings ()
  "Settings for `winner-mode'."

  ;; disable default winner-mode keybindings
  (setq winner-dont-bind-my-keys t)
  (winner-mode t)
  ;; bind `winner-undo' to `Ctrl-x 4'
  (define-key ctl-x-map "4" 'winner-undo)
  ;; bind `winner-redo' to `Ctrl-x 5'
  (define-key ctl-x-map "5" 'winner-redo)
  )

(eval-after-load "winner"
  `(winner-mode-settings))


(provide 'winner-mode-settings)


(use-package counsel
  :ensure t
  )

(use-package swiper
  :ensure try
  :bind (("C-s" . swiper)
	 ("C-r" . swiper)
	 ("C-c C-r" . ivy-resume)
	 ("M-x" . counsel-M-x)
	 ("C-x C-f" . counsel-find-file))
  :config
  (progn
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-display-style 'fancy)
    (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
    ))

(use-package avy
  :ensure t
  :bind ("M-s" . avy-goto-char))

(use-package auto-complete
  :ensure t
  :init
  (progn
    (ac-config-default)
    (global-auto-complete-mode t)
    ))

(use-package color-theme
  :ensure t)

;(use-package zenburn-theme
 ; :ensure t
  ;:config (load-theme 'zenburn t))


(use-package solarized-theme
  :ensure t
  :config (load-theme 'solarized-light t))

(use-package ox-reveal
:ensure ox-reveal)

(setq org-reveal-root "https://cdn.jsdelivr.net/reveal.js/3.0.0/")
(setq org-reveal-mathjax t)

(use-package flycheck
  :ensure t
  :init
  (global-flycheck-mode t))

(use-package jedi
  :ensure t
  :init
  (add-hook 'python-mode-hook 'jedi:setup)
  (add-hook 'python-mode-hook 'jedi:ac-setup)
  (setq jedi:environment-root "jedi")
  (setq jedi:environment-virtualenv
  (append python-environment-virtualenv
          '("--python" "/usr/local/bin/python3")))
